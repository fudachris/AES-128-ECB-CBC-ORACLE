#include "utils.h"



Words
GetRandomKey (void)
{
    Words key;
    key.w = (uint8_t*) malloc (32 * sizeof (uint8_t));
    key.l = 32;

    for (int i = 0; i < 32; i++)
    {
        uint8_t rand_key = 0 + ( std::rand() % ( 15 - 0 + 1 ) );
        key.w[i] = rand_key ;
    }

    return key;
}

Words
GetRandomIV (size_t bs)
{
    Words iv;
    iv.w = (uint8_t*) malloc (bs * sizeof (uint8_t));
    iv.l = bs;

    for (int i = 0; i < bs; i++)
    {
        uint8_t rand_iv = 0 + ( std::rand() % ( 15 - 0 + 1 ) );
        iv.w[i] = rand_iv ;
    }

    return iv;
}

uint8_t
ForwardSubBox(int x, int y)
{
    uint8_t SBOX[16][16]=
    {
        {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
        {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
        {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
        {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
        {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
        {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
        {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
        {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
        {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
        {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
        {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
        {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
        {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
        {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
        {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
        {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}
    };
    
    return (SBOX[x][y]);
}

uint8_t
InverseSubBox (int x, int y)
{
    uint8_t INV_SBOX[16][16]=
    {
        {0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb},
        {0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb},
        {0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e},
        {0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25},
        {0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92},
        {0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84},
        {0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06},
        {0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b},
        {0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73},
        {0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e},
        {0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b},
        {0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4},
        {0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f},
        {0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef},
        {0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61},
        {0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}
    };

    return (INV_SBOX[x][y]);
}

uint8_t 
E_Table (int x, int y)
{
    uint8_t ETABLE[16][16]=
    {
        {0x01, 0x03, 0x05, 0x0f, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 0x96, 0xa1, 0xf8, 0x13, 0x35}, 
        {0x5f, 0xe1, 0x38, 0x48, 0xd8, 0x73, 0x95, 0xa4, 0xf7, 0x02, 0x06, 0x0a, 0x1e, 0x22, 0x66, 0xaa}, 
        {0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe, 0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31}, 
        {0x53, 0xf5, 0x04, 0x0c, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8, 0xd3, 0x6e, 0xb2, 0xcd}, 
        {0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7, 0x62, 0xa6, 0xf1, 0x08, 0x18, 0x28, 0x78, 0x88}, 
        {0x83, 0x9e, 0xb9, 0xd0, 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98, 0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a}, 
        {0xb5, 0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0x0b, 0x1d, 0x27, 0x69, 0xbb, 0xd6, 0x61, 0xa3}, 
        {0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec, 0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0}, 
        {0xfb, 0x16, 0x3a, 0x4e, 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 0x15, 0x3f, 0x41}, 
        {0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 0xc0, 0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75}, 
        {0x9f, 0xba, 0xd5, 0x64, 0xac, 0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e, 0x89, 0x80}, 
        {0x9b, 0xb6, 0xc1, 0x58, 0xe8, 0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54}, 
        {0xfc, 0x1f, 0x21, 0x63, 0xa5, 0xf4, 0x07, 0x09, 0x1b, 0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46, 0xca}, 
        {0x45, 0xcf, 0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 0x51, 0xf3, 0x0e}, 
        {0x12, 0x36, 0x5a, 0xee, 0x29, 0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0x0d, 0x17}, 
        {0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 0xb4, 0xc7, 0x52, 0xf6, 0x01}
    };

    return (ETABLE[x][y]);
}

unsigned char 
L_Table (int x, int y)
{
    uint8_t LTABLE[16][16]=
    {
        {0x00, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1a, 0xc6, 0x4b, 0xc7, 0x1b, 0x68, 0x33, 0xee, 0xdf, 0x03}, 
        {0x64, 0x04, 0xe0, 0x0e, 0x34, 0x8d, 0x81, 0xef, 0x4c, 0x71, 0x08, 0xc8, 0xf8, 0x69, 0x1c, 0xc1}, 
        {0x7d, 0xc2, 0x1d, 0xb5, 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4, 0xa6, 0x72, 0x9a, 0xc9, 0x09, 0x78}, 
        {0x65, 0x2f, 0x8a, 0x05, 0x21, 0x0f, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45, 0x35, 0x93, 0xda, 0x8e}, 
        {0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94, 0x13, 0x5c, 0xd2, 0xf1, 0x40, 0x46, 0x83, 0x38}, 
        {0x66, 0xdd, 0xfd, 0x30, 0xbf, 0x06, 0x8b, 0x62, 0xb3, 0x25, 0xe2, 0x98, 0x22, 0x88, 0x91, 0x10}, 
        {0x7e, 0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b, 0x28, 0x54, 0xfa, 0x85, 0x3d, 0xba}, 
        {0x2b, 0x79, 0x0a, 0x15, 0x9b, 0x9f, 0x5e, 0xca, 0x4e, 0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57}, 
        {0xaf, 0x58, 0xa8, 0x50, 0xf4, 0xea, 0xd6, 0x74, 0x4f, 0xae, 0xe9, 0xd5, 0xe7, 0xe6, 0xad, 0xe8}, 
        {0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0x0b, 0xf5, 0x59, 0xcb, 0x5f, 0xb0, 0x9c, 0xa9, 0x51, 0xa0}, 
        {0x7f, 0x0c, 0xf6, 0x6f, 0x17, 0xc4, 0x49, 0xec, 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76, 0x7b, 0xb7}, 
        {0xcc, 0xbb, 0x3e, 0x5a, 0xfb, 0x60, 0xb1, 0x86, 0x3b, 0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d}, 
        {0x97, 0xb2, 0x87, 0x90, 0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd, 0x37, 0x3f, 0x5b, 0xd1}, 
        {0x53, 0x39, 0x84, 0x3c, 0x41, 0xa2, 0x6d, 0x47, 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab}, 
        {0x44, 0x11, 0x92, 0xd9, 0x23, 0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5}, 
        {0x67, 0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0x0d, 0x63, 0x8c, 0x80, 0xc0, 0xf7, 0x70, 0x07}
    };

    return (LTABLE[x][y]);
}

//FileReader Class
FileReader::FileReader(std::string filename, bool isInputAscii)
{
    std::ifstream input(filename.c_str());
    c = (char *) malloc (1 * sizeof(uint8_t));
    c[0] = 0;

    std::string line;
    total_length = 0;
    
    for (;getline(input, line);)
    {
	if (isInputAscii)
    {
        line += '\n';
    }

    size_t length = line.length();
    char  *a = (char *) malloc (length * sizeof(char));

     memcpy (a,line.c_str(),length);

     c = (char *) realloc (c, (length+total_length)*sizeof(uint8_t));

     memcpy(c+total_length, a, length);

     total_length += length;
	}
}

HexType
FileReader::GetHex (void)
{
    return (HexType(c,total_length));
}

AsciiType
FileReader::GetAscii (void)
{
    return (AsciiType(c,total_length));
}

Base64Type
FileReader::GetBase64 (void)
{
    return (Base64Type(c,total_length));
}

//KEY Class
KeyType::KeyType (HexType k)
{
    keySchedule.push_back (k);
    CreateKeySchedule ();
}

KeyType::KeyType (void)
{
}

std::vector<HexType>
KeyType::GetKeySchedule (void)
{
    return keySchedule;
}

void
KeyType::GetKeyWords (HexType tmp, Words **out)
{
    Words keyHex = tmp.GetHexWords();
    
    for (int i = 0, k = 0; i < 4; i++, k+=8)
    {
        for (int j = 0; j < 8; j++)
        {
            (*out)[i].w[j] = keyHex.w[k+j];
        }
    }
}

void
KeyType::NonlinearKeyFunction (Words word_in,
                               Words **word_out,
                               int round_number
                               )
{
    uint8_t rc[10] = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1B,0x36};
    
    uint8_t *sub = (uint8_t *) malloc (4 * sizeof(uint8_t));
    
    for (int i = 0, j = 0; i < 8; i+=2, j++)
    {
        uint8_t x = word_in.w[i];
        uint8_t y = word_in.w[i+1];
        sub[j] = ForwardSubBox(x,y);
    }
    
    Words *out = (Words *) malloc (4 * sizeof(Words));
    
    for (int i = 0; i < 4; i++)
    {
        out[i].w = (uint8_t *) malloc (8 * sizeof (uint8_t));
        out[i].l = 8;
    }
    
    out = *word_out;
    
    (*out).w[0] = ((rc[round_number-1] ^ sub[1]) & 0xF0) >> 4;
    (*out).w[1] = (rc[round_number-1] ^ sub[1]) & 0x0F;
    
    (*out).w[2] = (sub[2] & 0xF0) >> 4;
    (*out).w[3] = (sub[2] & 0x0F);
    
    (*out).w[4] = (sub[3] & 0xF0) >> 4;
    (*out).w[5] = (sub[3] & 0x0F);
    
    (*out).w[6] = (sub[0] & 0xF0) >> 4;
    (*out).w[7] = (sub[0] & 0x0F);
    
    free(sub);
}

void
KeyType::CreateKeySchedule (void)
{
    for (int rn = 1; rn < 11; rn++)
    {
        HexType tmp = keySchedule[rn-1];
        
        Words *w = (Words *) malloc (4 * sizeof (Words));
        Words *v = (Words *) malloc (4 * sizeof (Words));
        Words *f = (Words *) malloc (4 * sizeof (Words));
        
        for (int i = 0; i < 4; i++)
        {
            w[i].w = (uint8_t *) malloc (8 * sizeof(uint8_t));
            w[i].l = 8;
            
            v[i].w = (uint8_t *) malloc (8 * sizeof(uint8_t));
            v[i].l = 8;
            
            f[i].w = (uint8_t *) malloc (8 * sizeof(uint8_t));
            f[i].l = 8;
        }
        
        GetKeyWords (tmp,&w);
        
        for (int i = 0; i < 4; i++)
        {
            memcpy (v[i].w,w[i].w,8);
        }
        
        
        Words *v3_return = (Words *) malloc (1 * sizeof (Words));
        (*v3_return).w = (uint8_t *) malloc (8 * sizeof (uint8_t));
        (*v3_return).l = 8;
        
        NonlinearKeyFunction(v[3], &v3_return, rn);
        
        for (int i = 0; i < 8; i++)
        {
            f[0].w[i] = v[0].w[i] ^ (*v3_return).w[i];
            f[1].w[i] = v[1].w[i] ^ f[0].w[i];
            f[2].w[i] = v[2].w[i] ^ f[1].w[i];
            f[3].w[i] = v[3].w[i] ^ f[2].w[i];
        }
        
        uint8_t *ks = (uint8_t *) malloc (32 * sizeof(uint8_t));
        
        for (int i = 0, j = 0; i < 32; i+=8, j++)
        {
            memcpy(ks+i,f[j].w,8);
        }
        
        HexType ht = HexType(ks,32);
        
        keySchedule.push_back(ht);
        
        free(w);
        free(v);
        free(f);
        free(ks);
        free(v3_return);
    }
}

void
KeyType::Print (void)
{
    size_t vs = keySchedule.size();
    
    for (size_t i = 0; i < vs; i++)
    {
        HexType h = keySchedule[i];
        h.Print();
        std::cout << std::endl;
    }
}
